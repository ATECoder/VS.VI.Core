

    ''' <summary> Builds compensation string. </summary>
    ''' <exception cref="ArgumentNullException">     Thrown when one or more required arguments are
    '''                                              null. </exception>
    ''' <exception cref="InvalidOperationException"> Thrown when the requested operation is invalid. </exception>
    ''' <param name="lowFrequencyValues">  The low frequency values. </param>
    ''' <param name="highFrequencyValues"> The high frequency values. </param>
    ''' <returns> A String. </returns>
    Public Shared Function BuildCompensationString(ByVal lowFrequencyValues() As Double,
                                            ByVal highFrequencyValues() As Double) As String
        If lowFrequencyValues Is Nothing Then Throw New ArgumentNullException(NameOf(lowFrequencyValues))
        If highFrequencyValues Is Nothing Then Throw New ArgumentNullException(NameOf(highFrequencyValues))
        If lowFrequencyValues.Count <> 3 Then Throw New InvalidOperationException($"Low frequency array has {lowFrequencyValues.Count} values instead of 3")
        If highFrequencyValues.Count <> 3 Then Throw New InvalidOperationException($"High frequency array has {highFrequencyValues.Count} values instead of 3")
        Dim builder As New System.Text.StringBuilder
        builder.Append($"{lowFrequencyValues(1)}")
        builder.AppendFormat($",{lowFrequencyValues(2)}")
        builder.AppendFormat($",{highFrequencyValues(1)}")
        builder.AppendFormat($",{highFrequencyValues(2)}")
        Return builder.ToString
    End Function

    ''' <summary> Merge compensations. </summary>
    ''' <exception cref="ArgumentNullException">     Thrown when one or more required arguments are
    '''                                              null. </exception>
    ''' <exception cref="InvalidOperationException"> Thrown when the requested operation is invalid. </exception>
    ''' <param name="frequencies"> The frequencies. </param>
    ''' <param name="values">      The values. </param>
    ''' <returns> A String. </returns>
    Public Shared Function MergeCompensations(ByVal frequencies As String, ByVal values As String) As String
        If String.IsNullOrEmpty(frequencies) Then Throw New ArgumentNullException(NameOf(frequencies))
        If String.IsNullOrEmpty(values) Then Throw New ArgumentNullException(NameOf(values))
        Dim builder As New System.Text.StringBuilder
        Dim f As New Stack(Of String)(frequencies.Split(","c))
        Dim v As New Stack(Of String)(values.Split(","c))
        If 2 * f.Count <> v.Count Then
            Throw New InvalidOperationException($"Number of values {v.Count} must be twice the number of frequencies {f.Count}")
        End If
        Do While f.Any
            If builder.Length > 0 Then
                builder.AppendFormat("{0}", f.Pop)
            Else
                builder.AppendFormat(",{0}", f.Pop)
            End If
            If v.Any Then builder.AppendFormat(",{0}", v.Pop)
            If v.Any Then builder.AppendFormat(",{0}", v.Pop)
        Loop
        Return builder.ToString
    End Function

    ''' <summary> Builds the compensations. </summary>
    ''' <exception cref="ArgumentNullException">     Thrown when one or more required arguments are
    '''                                              null. </exception>
    ''' <exception cref="InvalidOperationException"> Thrown when the requested operation is invalid. </exception>
    ''' <exception cref="InvalidCastException">      Thrown when an object cannot be cast to a
    '''                                              required type. </exception>
    ''' <param name="frequencies"> The frequencies. </param>
    ''' <param name="values">      The values. </param>
    ''' <returns> A Double()() </returns>
    Public Shared Function BuildCompensations(ByVal frequencies As String, ByVal values As String) As Double()()
        If String.IsNullOrEmpty(frequencies) Then Throw New ArgumentNullException(NameOf(frequencies))
        If String.IsNullOrEmpty(values) Then Throw New ArgumentNullException(NameOf(values))
        Dim f As New Stack(Of String)(frequencies.Split(","c))
        Dim v As New Stack(Of String)(values.Split(","c))
        If 2 * f.Count <> v.Count Then
            Throw New InvalidOperationException($"Number of values {v.Count} must be twice the number of frequencies {f.Count}")
        End If
        Dim data()() As Double = New Double(f.Count - 1)() {}
        Dim index As Integer = 0
        Do While f.Any
            Dim av() As Double = New Double(2) {}
            Dim pop As String = f.Pop
            If Not Double.TryParse(pop, av(0)) Then
                Throw New InvalidCastException($"Parse failed for frequency {pop}")
            End If
            pop = v.Pop
            If Not Double.TryParse(pop, av(1)) Then
                Throw New InvalidCastException($"Parse failed for real value {pop}")
            End If
            pop = v.Pop
            If Not Double.TryParse(pop, av(2)) Then
                Throw New InvalidCastException($"Parse failed for imaginary value {pop}")
            End If
            data(index) = av
            index += 1
        Loop
        Return data
    End Function

    ''' <summary> Adapter setup. </summary>
    Sub AdapterSetup()

        ' TimeOut time should be greater than the measurement time.    
        Me.Device.Session.StoreTimeout(TimeSpan.FromSeconds(10))

        ' Select the adapter
        ' Set adapter type to 42942A
        Me.Device.Session.Write(":SENS1:ADAP:TYPE E4PR")

        ' Phase setup
        MessageBox.Show("Connect Open Termination")
        ' Execute open in phase setup
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:ACQ PHAS")
        ' Wait for measurement end
        Me.Device.Session.Query("*OPC?")

        ' Save phase setup data
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:SAVE PHAS")
        MessageBox.Show("Phase Setup Done")

        ' Impedance setup
        MessageBox.Show("Connect Open Termination")

        ' Execute open in impedance setup
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:ACQ OPEN")

        ' Wait for measurement end
        Me.Device.Session.Query("*OPC?")

        MessageBox.Show("Connect Short Termination")

        ' Execute short in impedance setup
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:ACQ SHOR")

        ' Wait for measurement end
        Me.Device.Session.Query("*OPC?")

        MessageBox.Show("Connect LOAD Termination")

        ' Execute load in impedance setup
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:ACQ LOAD")

        ' Wait for measurement end
        Me.Device.Session.Query("*OPC?")

        ' Save impedance setup data
        Me.Device.Session.Write(":SENS1:ADAP:CORR:COLL:SAVE IMP")

    End Sub

    ''' <summary> Toggle open compensation state. </summary>
    ''' <param name="enabled"> true to enable, false to disable. </param>
    Public Sub ToggleOpenCompensationState(ByVal enabled As Boolean)
        Me.Device.Session.WriteLine(":SENS1:CORR2:OPEN {0}", If(enabled, "1", "0"))
        ' Me.Device.CompensateChannelSubsystem.ApplyEnabled(enabled)
    End Sub

    ''' <summary> Applies the open compensation. </summary>
    ''' <exception cref="ArgumentNullException">     Thrown when one or more required arguments are
    '''                                              null. </exception>
    ''' <exception cref="InvalidOperationException"> Thrown when the requested operation is invalid. </exception>
    ''' <param name="lowFrequencyValues">  The low frequency values. </param>
    ''' <param name="highFrequencyValues"> The high frequency values. </param>
    Public Sub ApplyOpenCompensation(ByVal lowFrequencyValues() As Double,
                                     ByVal highFrequencyValues() As Double)
        If lowFrequencyValues Is Nothing Then Throw New ArgumentNullException(NameOf(lowFrequencyValues))
        If highFrequencyValues Is Nothing Then Throw New ArgumentNullException(NameOf(highFrequencyValues))
        If lowFrequencyValues.Count <> 3 Then Throw New InvalidOperationException($"Low frequency array has {lowFrequencyValues.Count} values instead of 3")
        If highFrequencyValues.Count <> 3 Then Throw New InvalidOperationException($"High frequency array has {highFrequencyValues.Count} values instead of 3")
        Me.Device.Session.WriteLine(":SENS1:CORR2:ZME:OPEN:DATA {0}",
                                    E4990Panel.BuildCompensationString(lowFrequencyValues, highFrequencyValues))
        ' Me.Device.CompensateChannelSubsystem.WriteImpedanceArray(True, lowFrequencyValues, highFrequencyValues)
    End Sub

    ''' <summary> Reads open compensations. </summary>
    ''' <returns> The open compensations. </returns>
    Public Function ReadOpenCompensations() As String

        ' read the frequencies
        Dim frequencies As String = Me.Device.Session.Query(":SENS1:CORR2:ZME:OPEN:FREQ?")
        'Me.Device.CompensateChannelSubsystem.QueryFrequencyArray()

        ' read the data
        Dim values As String = Me.Device.Session.Query(":SENS1:CORR2:ZME:OPEN:DATA?")
        ' Me.Device.CompensateChannelSubsystem.QueryImpedanceArray()

        Return E4990Panel.MergeCompensations(frequencies, values)
        'Return CompensateChannelSubsystem.Merge(Me.Device.CompensateChannelSubsystem.FrequencyArrayReading,Me.Device.CompensateChannelSubsystem.ImpedanceArrayReading)
    End Function

    ''' <summary> Acquires the open compensation. </summary>
    ''' <param name="lowFrequency">  The low frequency. </param>
    ''' <param name="highFrequency"> The high frequency. </param>
    Public Sub AcquireOpenCompensation(ByVal lowFrequency As Double, ByVal highFrequency As Double)

        ' Compensation points will be acquired at the sweep points:
        Me.ConfigureSweep(lowFrequency, highFrequency)

        ' Select arbitrary fixture model (default)
        Me.Device.Session.Write(":SENS1:FIXT:SEL ARB")

        ' Set user-specified frequencies
        Me.Device.Session.Write(":SENS1:CORR:COLL:FPO USER")
        ' Me.Device.SenseChannelSubsystem.ApplyFrequencyPointsType(FrequencyPointsType.User)

        ' Acquire open fixture compensation
        Me.Device.Session.Write(":SENS1:CORR2:COLL:ACQ:OPEN")
        'Me.Device.CompensateChannelSubsystem.AcquireMeasurements()

        ' Wait for measurement end
        Me.Device.Session.Query("*OPC?")
        ' Me.Device.StatusSubsystem.QueryOperationCompleted()

    End Sub

    ''' <summary> Toggle short compensation state. </summary>
    ''' <param name="enabled"> true to enable, false to disable. </param>
    Public Sub ToggleShortCompensationState(ByVal enabled As Boolean)
        Me.Device.Session.WriteLine(":SENS1:CORR2:SHOR {0}", If(enabled, "1", "0"))
        ' Me.Device.CompensateChannelSubsystem.ApplyEnabled(enabled)
    End Sub

    <CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1300:SpecifyMessageBoxOptions")>
    Sub CompensateFixture()

        ' TimeOut time should be greater than the measurement time.    
        Me.Device.Session.StoreTimeout(TimeSpan.FromSeconds(10))

        ' Select compensation point
        ' 
        ' Set compensation point at fix
        Me.Device.Session.Write(":SENS1:CORR:COLL:FPO FIX")

        ' Select fixture model           
        Me.Device.Session.Write(":SENS1:FIXT:SEL ARB") '  FIXT16047A")

        Call DefineTermination()

        ' Perform Fixture Compensation
        Dim result As DialogResult = MessageBox.Show("Do you perform Open Fixture Compensation?", "Fixture Compensation", MessageBoxButtons.YesNo)

        If result = DialogResult.Yes Then
            MessageBox.Show("Connect Open Termination")

            ' Execute open in fixture compensation
            Me.Device.Session.Write(":SENS1:CORR2:COLL:ACQ:OPEN")

            ' Wait for measurement end
            Me.Device.Session.Query("*OPC?")

        End If

        ' Perform Fixture Compensation
        result = MessageBox.Show("Do you perform Short Fixture Compensation?", "Fixture Compensation", MessageBoxButtons.YesNo)

        If result = DialogResult.Yes Then

            MessageBox.Show("Connect Short Termination")

            ' Execute short in fixture compensation
            Me.Device.Session.Write(":SENS1:CORR2:COLL:ACQ:SHOR")

            ' Wait for measurement end
            Me.Device.Session.Query("*OPC?")

        End If

        ' Perform Fixture Compensation
        result = MessageBox.Show("Do you perform Load Fixture Compensation?", "Fixture Compensation", MessageBoxButtons.YesNo)

        If result = DialogResult.Yes Then

            MessageBox.Show("Connect LOAD Termination")

            ' Execute load in fixture compensation
            Me.Device.Session.Write(":SENS1:CORR2:COLL:ACQ:LOAD")

            ' Wait for measurement end
            Me.Device.Session.Query("*OPC?")

        End If

    End Sub

    Private Sub DefineTermination()
        '
        Dim LoadF() As String, n As Integer, i As Integer
        ' Define Short termination by equivalent circuit model
        ' Set equivalent circuit model for short
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:SHOR:MOD EQU")
        ' Set short termination parameter (L)
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:SHOR:L 1E-9")
        ' Set short termination parameter (R)  
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:SHOR:R 1E-4")
        '
        ' Define Load by f-Z table model
        ' Set f-Z table model for short
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:LOAD:MOD TABL")
        n = 4
        ReDim LoadF(n)
        ' Define f-Z table (freq, real, imaginary)
        LoadF(1) = "20, 49.5, 1E-3"
        LoadF(2) = "1E3, 49.9, 1.2E-3"
        LoadF(3) = "1E6, 50, 1.5E-3"
        LoadF(4) = "120E6, 50.9, 2E-3"
        ' :SENS1:CORR2:CKIT:LOAD:TABL {n}, {freq 1}, {real 1}, {imaginary 1}, ... , {freq n}, {real n}, {imaginary n}
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:LOAD:TABL " & Str(n) & ",") ' Set f-Z table
        For i = 1 To n - 1
            Me.Device.Session.Write(LoadF(i) & ",")
        Next i
        Me.Device.Session.Write(LoadF(n))

    End Sub

    Public Sub ConfigureKeysightExample()

        Me.Device.Session.StoreTimeout(TimeSpan.FromSeconds(10))

        ' Preset the equipment to its known state.
        Me.Device.SystemSubsystem.PresetKnownState()

        Me.Device.Session.RestoreTimeout()

        ' DISPLAY: Set two channels
        Me.Device.Session.Write(":DISP:SPL D1_2")

        ' Set trigger source at BUS
        Me.Device.Session.Write(":TRIG:SOUR BUS")

        ' Setup Channel 1

        ' Set measurement parameter for trace 1
        Me.Device.Session.Write(":CALC1:PAR1:DEF Z")

        ' Set measurement parameter for trace 2
        Me.Device.Session.Write(":CALC1:PAR2:DEF TZ")

        ' Set Y-Axis at Log format
        Me.Device.Session.Write(":DISP:WIND1:TRAC1:Y:SPAC LOG")

        ' Stimulus Setup

        ' Turn on Continuous Activation mode for channel 1
        Me.Device.Session.Write(":INIT1:CONT ON")

        ' Set sweep type at LOG
        Me.Device.Session.Write(":SENS1:SWE:TYPE LOG")

        ' Set number of point
        Me.Device.Session.Write(":SENS1:SWE:POIN 201")

        ' Set start frequency
        Me.Device.Session.Write(":SENS1:FREQ:STAR 100E3")

        ' Set stop frequency
        Me.Device.Session.Write(":SENS1:FREQ:STOP 10E6")

        ' Set OSC mode
        Me.Device.Session.Write(":SOUR1:MODE VOLT")

        ' Set OSC level
        Me.Device.Session.Write(":SOUR1:VOLT 300E-3")

        ' Turn on ALC
        Me.Device.Session.Write(":SOUR1:ALC ON")

        ' Setup Channel 2

        ' Set measurement parameter for trace 1
        Me.Device.Session.Write(":CALC2:PAR1:DEF CS")

        ' Set measurement parameter for trace 2
        Me.Device.Session.Write(":CALC2:PAR2:DEF Q")

        ' Split the trace windows
        Me.Device.Session.Write(":DISP:WIND2:SPL D1_2")

        ' Stimulus Setup Channel 2

        ' Turn on Continuous Activation mode for channel 2
        Me.Device.Session.Write(":INIT2:CONT ON")

        ' Set sweep type at segment sweep
        Me.Device.Session.Write(":SENS2:SWE:TYPE SEGM")

        ' Set segment display at freq base
        Me.Device.Session.Write(":DISP:WIND2:X:SPAC LIN")

        Dim SegFmt As String = "7,0,1,0,0,0,0,0,3,"
        Dim SegNo1 As String = "1E4,1E5,50,0,0.3," ' Start Freq, Stop Freq, Nop, Voltage Type, OSC level
        Dim SegNo2 As String = "1E5,1E6,200,0,0.5,"
        Dim segNo3 As String = "1E6,1E7,50,0,0.3"

        ' Set sweep type at LOG"
        Me.Device.Session.Write(String.Format(":SENS2:SEGM:DATA {0}{1}{2}{3}", SegFmt, SegNo1, SegNo2, segNo3))

#If False Then
    ' Save setting into state file
    ' Save settings to file
    Me.Device.Session.Write(":MMEM:STOR ""D:\State\Test.sta""")  
   
   ' Close IO
    Analyzer.IO.Close
#End If

    End Sub

    Public Sub DefineShortTermination(ByVal resistance As Double, ByVal inductance As Double)

        ' Define Short termination by equivalent circuit model

        ' Set equivalent circuit model for short (that is the default)
        Me.Device.Session.Write(":SENS1:CORR2:CKIT:SHOR:MOD EQU")

        ' Set short termination parameter (L)
        Me.Device.Session.Write(String.Format(":SENS1:CORR2:CKIT:SHOR:L {0}", inductance))
        'Me.Device.CompensateShortSubsystem.ApplyModelInductance(inductance)

        ' Set short termination parameter (R)  
        Me.Device.Session.Write(String.Format(":SENS1:CORR2:CKIT:SHOR:R {0}", resistance))
        'Me.Device.CompensateShortSubsystem.ApplyModelResistance(resistance)

    End Sub

    ''' <summary> Select active trace. </summary>
    ''' <param name="channelNumber"> The channel number. </param>
    ''' <param name="traceNumber">   The trace number. </param>
    Public Sub SelectActiveTrace(ByVal channelNumber As Integer, ByVal traceNumber As Integer)
        Me.Device.Session.Write(String.Format(Globalization.CultureInfo.InvariantCulture,
                                              ":CALC{0}:PAR{1}:SEL", channelNumber, traceNumber))
        ' Me.Device.ChannelTraceSubsystem.Select()
    End Sub

    ''' <summary> Reads a marker. </summary>
    ''' <param name="channelNumber"> The channel number. </param>
    ''' <param name="markerNumber">  The marker number. </param>
    ''' <returns> The marker. </returns>
    Public Function ReadMarker(ByVal channelNumber As Integer, ByVal markerNumber As Integer) As String
        Dim result As String = ""
        result = Me.Device.Session.QueryTrimEnd(":CALC{0}:MARK{1}:Y?", channelNumber, markerNumber)
        ' marker returns two values.
        result = result.Split(","c)(0)
        'Me.Device.ChannelMarkerSubsystem.FetchLatestData()
        'result = Me.Device.ChannelMarkerSubsystem.Readings.PrimaryReading.ToString
        Return result
    End Function

    ''' <summary> Attempts to averaging wait complete from the given data. </summary>
    ''' <param name="count">   Number of. </param>
    ''' <param name="timeout"> The timeout. </param>
    ''' <returns> <c>true</c> if it succeeds; otherwise <c>false</c> </returns>
    Public Function TryAveragingWaitComplete(ByVal count As Integer, ByVal timeout As TimeSpan) As Boolean
        Dim result As Boolean = False
        Me.Device.CalculateChannelSubsystem.ApplyAverageCount(count)
        Me.Device.TriggerSubsystem.ApplyTriggerSource(TriggerSources.Bus)
        Me.Device.CalculateChannelSubsystem.ClearAverage()
        Me.Device.TriggerSubsystem.ApplyAveragingEnabled(True)
        Me.Device.TriggerSubsystem.Immediate()
        Me.Device.StatusSubsystem.AwaitOperationCompleted(timeout)
        result = Me.Device.StatusSubsystem.QueryOperationCompleted.GetValueOrDefault(False)
        Return result
    End Function

    ''' <summary> Automatic scale. </summary>
    ''' <param name="channelNumber"> The channel number. </param>
    ''' <param name="traceNumber">   The trace number. </param>
    Public Sub AutoScale(ByVal channelNumber As Integer, ByVal traceNumber As Integer)
        Me.Device.Session.WriteLine(":DISP:WIND{0}:TRAC{1}:Y:SCAL:AUTO", channelNumber, traceNumber)
        ' Me.Device.ChannelTraceSubsystem.AutoScale()
    End Sub

    ''' <summary> Enables the measurement available. </summary>
    Public Sub EnableMeasurementAvailable()

        ' Sets the positive transition filter to 0 and the negative transition filter to 1 
        ' so that the operation status event register at bit 4 is set to 1 only when the
        ' operation status condition register at bit 4 is changed from 1 to 0.
        Me.Device.Session.Write(":STAT:OPER:PTR 0")
        'Me.Device.StatusSubsystem.ApplyOperationPositiveTransitionEventEnableBitmask(0)
        Me.Device.Session.Write(":STAT:OPER:NTR 16")
        'Me.Device.StatusSubsystem.ApplyOperationNegativeTransitionEventEnableBitmask(16)

        ' Enables bit 4 in the operation status event register and bit 8 in the status byte register.
        Me.Device.Session.Write(":STAT:OPER:ENAB 16")
        ' Me.Device.StatusSubsystem.ApplyOperationEventEnableBitmask(16)
        Me.Device.Session.Write("*SRE 128")
        ' Me.Device.StatusSubsystem.EnableServiceRequest(VI.Pith.ServiceRequests.OperationEvent) ' 128

    End Sub

    ''' <summary> Configure impedance measurement. </summary>
    ''' <param name="sourceMode">    Source mode. </param>
    ''' <param name="aperture">      The aperture. </param>
    ''' <param name="level">         The level. </param>
    ''' <param name="lowFrequency">  The low frequency. </param>
    ''' <param name="highFrequency"> The high frequency. </param>
    Public Sub ConfigureImpedanceMeasurement(ByVal sourceMode As SourceFunctionModes, aperture As Double, ByVal level As Double,
                                             ByVal lowFrequency As Double, ByVal highFrequency As Double)

        Me.Device.Session.StoreTimeout(TimeSpan.FromSeconds(10))

        ' Preset the equipment to its known state.
        Me.Device.SystemSubsystem.PresetKnownState()

        ' Clear the error queue
        Me.Device.ClearExecutionState()

        ' clear the device display from warnings
        Me.Device.Session.Write(":DISP:CCL")
        ' Me.Device.DisplaySubsystem.ClearCautionMessages

        Me.Device.Session.RestoreTimeout()

        ' Set trigger source at BUS
        Me.Device.Session.Write(":TRIG:SOUR BUS")
        ' Me.Device.TriggerSubsystem.ApplyTriggerSource(TriggerSources.Bus)

        ' Setup Channel 1
        'Me.Device.CalculateChannelSubsystem.ApplyTraceCount(2)

        ' Allocate measurement parameter for trace 1: Rs
        Me.Device.Session.Write(":CALC1:PAR1:DEF RS")
        'Me.Device.PrimaryChannelTraceSubsystem.ApplyParameter(TraceParameters.SeriesResistance)

        ' Allocate measurement parameter for trace 2: Ls
        Me.Device.Session.Write(":CALC1:PAR2:DEF LS")
        'Me.Device.SecondaryChannelTraceSubsystem.ApplyParameter(TraceParameters.SeriesInductance)

        ' Stimulus Setup

        ' Turn on Continuous Activation mode for channel 1
        Me.Device.Session.Write(":INIT1:CONT ON")
        ' Me.Device.ChannelTriggerSubsystem.ApplyContinuousEnabled(True)

        ' Set aperture
        Me.Device.Session.WriteLine(":SENS1:APER {0}", CInt(aperture))
        ' Me.Device.SenseChannelSubsystem.ApplyAperture(aperture)

        ' set a two point sweep.
        ' _ApplySweepSettingsButton_Click

        ' _ApplySourceSettingButton_Click

    End Sub
    ''' <summary> Event handler. Called by _ReadButton for click events. Query the Device for a
    ''' reading. </summary>
    ''' <param name="sender"> Source of the event. </param>
    ''' <param name="e">      Event information. </param>
    <System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")>
    Private Sub _ReadButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles _ReadButton.Click
        Try
            Me.Cursor = Cursors.WaitCursor
            Me.ErrorProvider.Clear()
            Dim caption As String = ""
            Me.Device.ClearExecutionState()
            Me.EnableMeasurementAvailable()
            ' clear the device display from warnings
            ' Me.Device.Session.Write(":DISP:CCL")
            Me.Device.DisplaySubsystem.ClearCautionMessages()
            ' Me.Device.Session.WriteLine(":TRIG")
            Me.Device.TriggerSubsystem.Initiate()
            If Me.Device.StatusSubsystem.TryAwaitServiceRequest(VI.Pith.ServiceRequests.RequestingService, TimeSpan.FromSeconds(10),
                                                                TimeSpan.FromMilliseconds(100)) Then
                ' auto scale after measurement completes
                Me.AutoScale(1, 1)
                Me.AutoScale(1, 2)
                Me.SelectActiveTrace(1, 1)
                caption = Me.ReadMarker(1, 1)
                Me._ReadingToolStripStatusLabel.SafeTextSetter(caption)
            Else
                Me.ErrorProvider.Annunciate(sender, "timeout")
            End If
            'Me.Device.MeasureSubsystem.Read()
        Catch ex As Exception
            Me.ErrorProvider.Annunciate(sender, ex.ToString)
            Me.Talker.Publish(TraceEventType.Error, My.MyLibrary.TraceEventId, "Exception occurred initiating a measurement;. Details: {0}", ex)
        Finally
            Me.Cursor = Cursors.Default
        End Try
    End Sub
